// Generated by typings
// Source: watson-developer-cloud.d.ts
declare module 'watson-developer-cloud' {
/** Declaration file generated by dts-gen */

export class AlchemyDataNewsV1 {
    constructor(options: any);
    getNews(params: any, callback: any): any;
    static URL: string;
}
export class AlchemyLanguageV1 {
    constructor(options: any);
    authors(_params: any, callback: any): any;
    category(_params: any, callback: any): any;
    combined(_params: any, callback: any): any;
    concepts(_params: any, callback: any): any;
    dates(_params: any, callback: any): any;
    emotion(params: any, callback: any): any;
    entities(_params: any, callback: any): any;
    feeds(_params: any, callback: any): any;
    keywords(_params: any, callback: any): any;
    language(_params: any, callback: any): any;
    microformats(_params: any, callback: any): any;
    publicationDate(_params: any, callback: any): any;
    relations(_params: any, callback: any): any;
    sentiment(params: any, callback: any): any;
    taxonomy(_params: any, callback: any): any;
    text(params: any, callback: any): any;
    title(_params: any, callback: any): any;
    typedRelations(_params: any, callback: any): any;
    static URL: string;
}
export class AlchemyVisionV1 {
    constructor(options: any);
    getImageKeywords(_params: any, callback: any): any;
    getImageLinks(_params: any, callback: any): any;
    getImageSceneText(_params: any, callback: any): any;
    recognizeFaces(_params: any, callback: any): any;
    static URL: string;
}
export class AuthorizationV1 {
    constructor(options: any);
    getToken(params: any, callback: any): any;
    static URL: string;
}
export class ConversationV1 {
    constructor(options: any);
    message(params: any, callback: any): any;
    static URL: string;
    static VERSION_DATE_2016_07_11: string;
    static VERSION_DATE_2016_09_20: string;
}
export class ConversationV1Experimental {
    constructor(options: any);
    message(params: any, callback: any): any;
    static URL: string;
}
export class DialogV1 {
    constructor(options: any);
    conversation(params: any, callback: any): any;
    createDialog(params: any, callback: any): any;
    deleteDialog(params: any, callback: any): any;
    getContent(params: any, callback: any): any;
    getConversation(params: any, callback: any): any;
    getDialogs(params: any, callback: any): any;
    getProfile(params: any, callback: any): any;
    updateContent(params: any, callback: any): any;
    updateDialog(params: any, callback: any): any;
    updateProfile(params: any, callback: any): any;
    static URL: string;
}
export class DiscoveryV1 {
    constructor(options: any);
    addDocument(params: any, callback: any): any;
    createCollection(params: any, callback: any): any;
    deleteCollection(params: any, callback: any): any;
    deleteDocument(params: any, callback: any): any;
    getCollection(params: any, callback: any): any;
    getCollections(params: any, callback: any): any;
    getConfiguration(params: any, callback: any): any;
    getConfigurations(params: any, callback: any): any;
    getEnvironment(params: any, callback: any): any;
    getEnvironments(params: any, callback: any): any;
    query(params: any, callback: any): any;
    static URL: string;
    static VERSION_DATE_2016_12_15: string;
}
export class DiscoveryV1Experimental {
    constructor(options: any);
    getCollection(params: any, collectionId: any, callback: any): any;
    getCollections(params: any, callback: any): any;
    getEnvironment(params: any, callback: any): any;
    getEnvironments(params: any, callback: any): any;
    query(params: any, callback: any): any;
    static URL: string;
    static VERSION_DATE_2016_07_11: string;
}
export class DocumentConversionV1 {
    constructor(options: any);
    addDocumentToBatch(): void;
    convert(params: any, callback: any): any;
    createBatch(): void;
    createJob(): void;
    getBatch(): void;
    getBatchDocument(): void;
    getBatchDocuments(): void;
    getBatches(): void;
    getDocument(): void;
    getDocuments(): void;
    getJob(): void;
    getJobLog(): void;
    getJobs(): void;
    getOutput(): void;
    getOutputs(): void;
    index(params: any, callback: any): any;
    updateBatch(): void;
    uploadDocument(): void;
    static URL: string;
}
export class LanguageTranslationV2 {
    constructor(options: any);
    createModel(params: any, callback: any): any;
    deleteModel(params: any, callback: any): any;
    getIdentifiableLanguages(params: any, callback: any): any;
    getModel(params: any, callback: any): any;
    getModels(params: any, callback: any): any;
    identify(params: any, callback: any): any;
    translate(params: any, callback: any): any;
    static URL: string;
}
export class LanguageTranslatorV2 {
    constructor(options: any);
    createModel(params: any, callback: any): any;
    deleteModel(params: any, callback: any): any;
    getIdentifiableLanguages(params: any, callback: any): any;
    getModel(params: any, callback: any): any;
    getModels(params: any, callback: any): any;
    identify(params: any, callback: any): any;
    translate(params: any, callback: any): any;
    static URL: string;
}
export class NaturalLanguageClassifierV1 {
    constructor(options: any);
    classify(params: any, callback: any): any;
    create(params: any, callback: any): any;
    list(params: any, callback: any): any;
    remove(params: any, callback: any): any;
    status(params: any, callback: any): any;
    static URL: string;
}
export class PersonalityInsightsV2 {
    constructor(options: any);
    profile(params: any, callback: any): any;
    static URL: string;
}
export class PersonalityInsightsV3 {
    constructor(options: any);
    profile(_params: any, callback: any): any;
    static URL: string;
}
export class RetrieveAndRankV1 {
    constructor(options: any);
    createCluster(params: any, callback: any): any;
    createCollection(params: any, callback: any): any;
    createRanker(params: any, callback: any): any;
    createSolrClient(params: any): any;
    deleteCluster(params: any, callback: any): any;
    deleteCollection(params: any, callback: any): any;
    deleteConfig(params: any, callback: any): any;
    deleteRanker(params: any, callback: any): any;
    getClusterStats(params: any, callback: any): any;
    getConfig(params: any, callback: any): any;
    getResizeStatus(params: any, callback: any): any;
    listClusters(params: any, callback: any): any;
    listCollections(params: any, callback: any): any;
    listConfigs(params: any, callback: any): any;
    listRankers(params: any, callback: any): any;
    pollCluster(params: any, callback: any): any;
    rank(params: any, callback: any): any;
    rankerStatus(params: any, callback: any): any;
    resizeCluster(params: any, callback: any): any;
    uploadConfig(params: any, callback: any): any;
    static URL: string;
}
export class SpeechToTextV1 {
    constructor(options: any);
    addCorpus(params: any, callback: any): any;
    addWord(params: any, callback: any): any;
    addWords(params: any, callback: any): any;
    createCustomization(params: any, callback: any): any;
    createRecognizeStream(params: any): any;
    createSession(params: any, callback: any): any;
    deleteCorpus(params: any, callback: any): any;
    deleteCustomization(params: any, callback: any): any;
    deleteSession(params: any, callback: any): any;
    deleteWord(params: any, callback: any): any;
    getCorpora(params: any, callback: any): any;
    getCustomization(params: any, callback: any): any;
    getCustomizations(params: any, callback: any): any;
    getModel(params: any, callback: any): any;
    getModels(params: any, callback: any): any;
    getRecognizeStatus(params: any, callback: any): any;
    getWord(params: any, callback: any): any;
    getWords(params: any, callback: any): any;
    observeResult(params: any, ...args: any[]): any;
    recognize(params: any, callback: any): any;
    recognizeLive(params: any, ...args: any[]): any;
    resetCustomization(params: any, callback: any): any;
    trainCustomization(params: any, callback: any): any;
    updateCustomization(params: any, callback: any): any;
    upgradeCustomization(params: any, callback: any): any;
    whenCorporaAnalyzed(params: any, callback: any): any;
    whenCustomizationReady(params: any, callback: any): any;
    static ERR_NO_CORPORA: string;
    static ERR_TIMEOUT: string;
    static URL: string;
}
export class TextToSpeechV1 {
    constructor(options: any);
    addWord(params: any, callback: any): any;
    addWords(params: any, callback: any): any;
    createCustomization(params: any, callback: any): any;
    deleteCustomization(params: any, callback: any): any;
    deleteWord(params: any, callback: any): any;
    getCustomization(params: any, callback: any): any;
    getCustomizations(params: any, callback: any): any;
    getWord(params: any, callback: any): any;
    getWords(params: any, callback: any): any;
    pronunciation(params: any, callback: any): any;
    synthesize(params: any, callback: any): any;
    updateCustomization(params: any, callback: any): any;
    voice(params: any, callback: any): any;
    voices(params: any, callback: any): any;
    static URL: string;
}
export class ToneAnalyzerV3 {
    constructor(options: any);
    tone(params: any, callback: any): any;
    static URL: string;
}
export class TradeoffAnalyticsV1 {
    constructor(options: any);
    dilemmas(params: any, callback: any): any;
    events(params: any, callback: any): any;
    static URL: string;
}
export class VisualRecognitionV3 {
    constructor(options: any);
    addImage(params: any, callback: any): any;
    classify(params: any, callback: any): any;
    createClassifier(params: any, callback: any): any;
    createCollection(params: any, callback: any): any;
    deleteClassifier(params: any, callback: any): any;
    deleteCollection(params: any, callback: any): any;
    deleteImage(params: any, callback: any): any;
    deleteImageMetadata(params: any, callback: any): any;
    detectFaces(params: any, callback: any): any;
    findSimilar(params: any, callback: any): any;
    getClassifier(params: any, callback: any): any;
    getCollection(params: any, callback: any): any;
    getCredentialsFromBluemix(): any;
    getCredentialsFromEnvironment(name: any): any;
    getImage(params: any, callback: any): any;
    getImageMetadata(params: any, callback: any): any;
    initCredentials(options: any): any;
    listClassifiers(params: any, callback: any): any;
    listCollections(params: any, callback: any): any;
    listImages(params: any, callback: any): any;
    recognizeText(params: any, callback: any): any;
    retrainClassifier(params: any, callback: any): any;
    setImageMetadata(params: any, callback: any): any;
    static URL: string;
}
export function alchemy_data_news(options: any): any;
export function alchemy_language(options: any): any;
export function alchemy_vision(options: any): any;
export function authorization(options: any): any;
export function concept_expansion(): void;
export function concept_insights(): void;
export function conversation(options: any): any;
export function dialog(options: any): any;
export function discovery(options: any): any;
export function document_conversion(options: any): any;
export function language_translation(options: any): any;
export function language_translator(options: any): any;
export function message_resonance(): void;
export function natural_language_classifier(options: any): any;
export function personality_insights(options: any): any;
export function question_and_answer(): void;
export function relationship_extraction(): void;
export function retrieve_and_rank(options: any): any;
export function speech_to_text(options: any): any;
export function text_to_speech(options: any): any;
export function tone_analyzer(options: any): any;
export function tradeoff_analytics(options: any): any;
export function visual_insights(): void;
export function visual_recognition(options: any): any;
}
